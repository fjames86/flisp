.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "scalb" P 2003 POSIX
.\" scalb 
.SH NAME
scalb - load exponent of a radix-independent floating-point number
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double scalb(double\fP \fIx\fP\fB, double\fP \fIn\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
The \fIscalb\fP() function shall compute \fIx\fP*\fIr\fP, where \fIr\fP
is the radix of the
machine's floating-point arithmetic. When \fIr\fP is 2, \fIscalb\fP()
shall be equivalent to \fIldexp\fP() . The value of \fIr\fP is FLT_RADIX
which is defined in \fI<float.h>\fP.
.LP
An application wishing to check for error situations should set \fIerrno\fP
to zero and call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before calling these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, an error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, the \fIscalb\fP() function shall return
\fIx\fP*\fIr\fP.
.LP
If \fIx\fP or \fIn\fP is NaN, a NaN shall be returned.
.LP
If \fIn\fP is zero, \fIx\fP shall be returned.
.LP
If \fIx\fP is \(+-Inf and \fIn\fP is not -Inf, \fIx\fP shall be returned.
.LP
If \fIx\fP is \(+-0 and \fIn\fP is not +Inf, \fIx\fP shall be returned.
.LP
If \fIx\fP is \(+-0 and \fIn\fP is +Inf, a domain error shall occur,
and either a NaN (if supported), or an
implementation-defined value shall be returned.
.LP
If \fIx\fP is \(+-Inf and \fIn\fP is -Inf, a domain error shall occur,
and either a NaN (if supported), or an
implementation-defined value shall be returned.
.LP
If the result would cause an overflow, a range error shall occur and
\(+-HUGE_VAL (according to the sign of \fIx\fP) shall
be returned.
.LP
If the correct value would cause underflow, and is representable,
a range error may occur and the correct value shall be
returned.
.LP
If the correct value would cause underflow, and is not representable,
a range error may occur, and 0.0 shall be returned.
.SH ERRORS
.LP
The \fIscalb\fP() function shall fail if:
.TP
Domain\0Error
If \fIx\fP is zero and \fIn\fP is +Inf, or \fIx\fP is Inf and \fIn\fP
is -Inf. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [EDOM]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the invalid floating-point exception shall be
raised.
.TP
Range\0Error
The result would overflow. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the overflow floating-point exception shall be
raised.
.sp
.LP
The \fIscalb\fP() function may fail if:
.TP
Range\0Error
The result underflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the underflow floating-point exception shall be
raised.
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Applications should use either \fIscalbln\fP(), \fIscalblnf\fP(),
or \fIscalblnl\fP() in preference to
this function.
.LP
IEEE\0Std\01003.1-2001 only defines the behavior for the \fIscalb\fP()
function when the \fIn\fP argument is an
integer, a NaN, or Inf. The behavior of other values for the \fIn\fP
argument is unspecified.
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfeclearexcept\fP() , \fIfetestexcept\fP() , \fIilogb\fP() , \fIldexp\fP()
, \fIlogb\fP() , \fIscalbln\fP() , the Base Definitions volume of
IEEE\0Std\01003.1-2001, Section 4.18, Treatment of Error Conditions
for Mathematical Functions, \fI<float.h>\fP, \fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
