.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "nextafter" P 2003 POSIX
.\" nextafter 
.SH NAME
nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl
- next representable floating-point
number
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double nextafter(double\fP \fIx\fP\fB, double\fP \fIy\fP\fB);
.br
float nextafterf(float\fP \fIx\fP\fB, float\fP \fIy\fP\fB);
.br
long double nextafterl(long double\fP \fIx\fP\fB, long double\fP \fIy\fP\fB);
.br
double nexttoward(double\fP \fIx\fP\fB, long double\fP \fIy\fP\fB);
.br
float nexttowardf(float\fP \fIx\fP\fB, long double\fP \fIy\fP\fB);
.br
long double nexttowardl(long double\fP \fIx\fP\fB, long double\fP
\fIy\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
The functionality described on this reference page is aligned with
the ISO\0C standard. Any conflict between the
requirements described here and the ISO\0C standard is unintentional.
This volume of IEEE\0Std\01003.1-2001 defers to
the ISO\0C standard. 
.LP
The \fInextafter\fP(), \fInextafterf\fP(), and \fInextafterl\fP()
functions shall compute the next representable
floating-point value following \fIx\fP in the direction of \fIy\fP.
Thus, if \fIy\fP is less than \fIx\fP, \fInextafter\fP()
shall return the largest representable floating-point number less
than \fIx\fP. The \fInextafter\fP(), \fInextafterf\fP(), and
\fInextafterl\fP() functions shall return \fIy\fP if \fIx\fP equals
\fIy\fP.
.LP
The \fInexttoward\fP(), \fInexttowardf\fP(), and \fInexttowardl\fP()
functions shall be equivalent to the corresponding
\fInextafter\fP() functions, except that the second parameter shall
have type \fBlong double\fP and the functions shall return
\fIy\fP converted to the type of the function if \fIx\fP equals \fIy\fP.
.LP
An application wishing to check for error situations should set \fIerrno\fP
to zero and call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before calling these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, an error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return the next
representable floating-point value following \fIx\fP in the
direction of \fIy\fP.
.LP
If \fIx\fP== \fIy\fP, \fIy\fP (of the type \fIx\fP) shall be returned.
.LP
If \fIx\fP is finite and the correct function value would overflow,
a range error shall occur and \(+-HUGE_VAL,
\(+-HUGE_VALF, and \(+-HUGE_VALL (with the same sign as \fIx\fP) shall
be returned as appropriate for the return type of
the function.
.LP
If
\fIx\fP or \fIy\fP is NaN, a NaN shall be returned.
.LP
If \fIx\fP!= \fIy\fP and the correct function value is subnormal,
zero, or underflows, a range error shall occur, and either
the correct function value (if representable) or 0.0 shall be returned.
.SH ERRORS
.LP
These functions shall fail if:
.TP
Range\0Error
The correct value overflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the overflow floating-point exception shall be
raised.
.TP
Range\0Error
The correct value is subnormal or underflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the underflow floating-point exception shall be
raised. 
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfeclearexcept\fP() , \fIfetestexcept\fP() , the Base
Definitions volume of IEEE\0Std\01003.1-2001, Section 4.18, Treatment
of
Error Conditions for Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
