.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "lgamma" P 2003 POSIX
.\" lgamma 
.SH NAME
lgamma, lgammaf, lgammal - log gamma function
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double lgamma(double\fP \fIx\fP\fB);
.br
float lgammaf(float\fP \fIx\fP\fB);
.br
long double lgammal(long double\fP \fIx\fP\fB);
.br
\fP
.LP
\fBextern int signgam; \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
The functionality described on this reference page is aligned with
the ISO\0C standard. Any conflict between the
requirements described here and the ISO\0C standard is unintentional.
This volume of IEEE\0Std\01003.1-2001 defers to
the ISO\0C standard. 
.LP
These functions shall compute 
.sp
.sp
The argument \fIx\fP need not be a non-positive integer ( is defined
over the reals,
except the non-positive integers).
.LP
The sign of  is returned in the external integer \fIsigngam\fP. 
.LP
These functions need not be reentrant. A function that is not required
to be reentrant is not required to be thread-safe. 
.LP
An application wishing to check for error situations should set \fIerrno\fP
to zero and call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before calling these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, an error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return the logarithmic
gamma of \fIx\fP.
.LP
If \fIx\fP is a non-positive integer, a pole error shall occur and
\fIlgamma\fP(), \fIlgammaf\fP(), and \fIlgammal\fP()
shall return +HUGE_VAL, +HUGE_VALF, and +HUGE_VALL, respectively.
.LP
If the correct value would cause overflow, a range error shall occur
and \fIlgamma\fP(), \fIlgammaf\fP(), and \fIlgammal\fP()
shall return \(+-HUGE_VAL, \(+-HUGE_VALF, and \(+-HUGE_VALL (having
the same sign as the correct value),
respectively.
.LP
If
\fIx\fP is NaN, a NaN shall be returned.
.LP
If \fIx\fP is 1 or 2, +0 shall be returned.
.LP
If \fIx\fP is \(+-Inf, +Inf shall be returned. 
.SH ERRORS
.LP
These functions shall fail if:
.TP
Pole\0Error
The \fIx\fP argument is a negative integer or zero. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the divide-by-zero floating-point exception shall be
raised.
.TP
Range\0Error
The result overflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the overflow floating-point exception shall be
raised.
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexp\fP() , \fIfeclearexcept\fP() , \fIfetestexcept\fP() , \fIisnan\fP()
, the Base Definitions volume of
IEEE\0Std\01003.1-2001, Section 4.18, Treatment of Error Conditions
for
Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
