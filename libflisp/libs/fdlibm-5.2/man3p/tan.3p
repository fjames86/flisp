.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "tan" P 2003 POSIX
.\" tan 
.SH NAME
tan, tanf, tanl - tangent function
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double tan(double\fP \fIx\fP\fB);
.br
float tanf(float\fP \fIx\fP\fB);
.br
long double tanl(long double\fP \fIx\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
The functionality described on this reference page is aligned with
the ISO\0C standard. Any conflict between the
requirements described here and the ISO\0C standard is unintentional.
This volume of IEEE\0Std\01003.1-2001 defers to
the ISO\0C standard. 
.LP
These functions shall compute the tangent of their argument \fIx\fP,
measured in radians.
.LP
An application wishing to check for error situations should set \fIerrno\fP
to zero and call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before calling these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, an error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return the tangent
of \fIx\fP.
.LP
If the correct value would cause underflow, and is not representable,
a range error may occur, and   \0either 0.0 (if
supported), or  \0an implementation-defined value shall be
returned.
.LP
If
\fIx\fP is NaN, a NaN shall be returned.
.LP
If \fIx\fP is \(+-0, \fIx\fP shall be returned.
.LP
If \fIx\fP is subnormal, a range error may occur and \fIx\fP should
be returned.
.LP
If \fIx\fP is \(+-Inf, a domain error shall occur, and either a NaN
(if supported), or an implementation-defined value
shall be returned.
.LP
If the correct value would cause underflow, and is representable,
a range error may occur and the correct value shall be
returned. 
.LP
If the correct value would cause overflow, a range error shall occur
and \fItan\fP(), \fItanf\fP(), and \fItanl\fP() shall
return \(+-HUGE_VAL, \(+-HUGE_VALF, and \(+-HUGE_VALL, respectively,
with the same sign as the correct value of the
function. 
.SH ERRORS
.LP
These functions shall fail if:
.TP
Domain\0Error
The value of \fIx\fP is \(+-Inf. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [EDOM]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the invalid floating-point exception shall be raised.
.TP
Range\0Error
The result overflows 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the overflow floating-point exception shall be raised.
.sp
.LP
These functions may fail if:
.TP
Range\0Error
The result underflows,   \0or the value of \fIx\fP is subnormal. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the underflow floating-point exception shall be
raised.
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.SS Taking the Tangent of a 45-Degree Angle
.sp
.RS
.nf

\fB#include <math.h>
\&...
double radians = 45.0 * M_PI / 180;
double result;
\&...
result = tan (radians);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
There are no known floating-point representations such that for a
normal argument, \fItan\fP( \fIx\fP) is either overflow or
underflow.
.LP
These functions may lose accuracy when their argument is near a multiple
of /2 or is far
from 0.0.
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIatan\fP() , \fIfeclearexcept\fP() , \fIfetestexcept\fP() , \fIisnan\fP()
, the Base Definitions volume of
IEEE\0Std\01003.1-2001, Section 4.18, Treatment of Error Conditions
for
Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
