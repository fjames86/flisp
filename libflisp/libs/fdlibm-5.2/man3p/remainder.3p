.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "remainder" P 2003 POSIX
.\" remainder 
.SH NAME
remainder, remainderf, remainderl - remainder function
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double remainder(double\fP \fIx\fP\fB, double\fP \fIy\fP\fB);
.br
float remainderf(float\fP \fIx\fP\fB, float\fP \fIy\fP\fB);
.br
long double remainderl(long double\fP \fIx\fP\fB, long double\fP \fIy\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
The functionality described on this reference page is aligned with
the ISO\0C standard. Any conflict between the
requirements described here and the ISO\0C standard is unintentional.
This volume of IEEE\0Std\01003.1-2001 defers to
the ISO\0C standard. 
.LP
These functions shall return the floating-point remainder \fIr\fP=
\fIx\fP- \fIny\fP when \fIy\fP is non-zero. The value
\fIn\fP is the integral value nearest the exact value \fIx\fP/ \fIy\fP.
When |\fIn\fP-\fIx\fP/\fIy\fP|=0.5, the value
\fIn\fP is chosen to be even.
.LP
The behavior of \fIremainder\fP() shall be independent of the rounding
mode.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return the floating-point
remainder \fIr\fP= \fIx\fP- \fIny\fP when
\fIy\fP is non-zero.
.LP
If
\fIx\fP or \fIy\fP is NaN, a NaN shall be returned.
.LP
If \fIx\fP is infinite or \fIy\fP is 0 and the other is non-NaN, a
domain error shall occur, and either a NaN (if supported),
or an implementation-defined value shall be returned. 
.SH ERRORS
.LP
These functions shall fail if:
.TP
Domain\0Error
The \fIx\fP argument is \(+-Inf, or the \fIy\fP argument is \(+-0
and the other argument is non-NaN. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [EDOM]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the invalid floating-point exception shall be raised.
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIabs\fP() , \fIdiv\fP() , \fIfeclearexcept\fP() , \fIfetestexcept\fP()
, \fIldiv\fP() , the Base Definitions volume of IEEE\0Std\01003.1-2001,
Section 4.18, Treatment of Error Conditions for Mathematical Functions,
\fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
