.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "scalbln" P 2003 POSIX
.\" scalbln 
.SH NAME
scalbln, scalblnf, scalblnl, scalbn, scalbnf, scalbnl - compute exponent
using FLT_RADIX
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double scalbln(double\fP \fIx\fP\fB, long\fP \fIn\fP\fB);
.br
float scalblnf(float\fP \fIx\fP\fB, long\fP \fIn\fP\fB);
.br
long double scalblnl(long double\fP \fIx\fP\fB, long\fP \fIn\fP\fB);
.br
double scalbn(double\fP \fIx\fP\fB, int\fP \fIn\fP\fB);
.br
float scalbnf(float\fP \fIx\fP\fB, int\fP \fIn\fP\fB);
.br
long double scalbnl(long double\fP \fIx\fP\fB, int\fP \fIn\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
The functionality described on this reference page is aligned with
the ISO\0C standard. Any conflict between the
requirements described here and the ISO\0C standard is unintentional.
This volume of IEEE\0Std\01003.1-2001 defers to
the ISO\0C standard. 
.LP
These functions shall compute \fIx\fP\0*\0FLT_RADIX\fI**n\fP efficiently,
not normally by
computing FLT_RADIX\fI**n\fP explicitly.
.LP
An application wishing to check for error situations should set \fIerrno\fP
to zero and call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before calling these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, an error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return \fIx\fP\0*\0FLT_RADIX\fI**n\fP.
.LP
If the result would cause overflow, a range error shall occur and
these functions shall return \(+-HUGE_VAL,
\(+-HUGE_VALF, and \(+-HUGE_VALL (according to the sign of \fIx\fP)
as appropriate for the return type of the
function.
.LP
If the correct value would cause underflow, and is not representable,
a range error may occur, and   \0either 0.0 (if
supported), or  \0an implementation-defined value shall be
returned.
.LP
If
\fIx\fP is NaN, a NaN shall be returned.
.LP
If \fIx\fP is \(+-0 or \(+-Inf, \fIx\fP shall be returned.
.LP
If \fIn\fP is 0, \fIx\fP shall be returned.
.LP
If the correct value would cause underflow, and is representable,
a range error may occur and the correct value shall be
returned. 
.SH ERRORS
.LP
These functions shall fail if:
.TP
Range\0Error
The result overflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the overflow floating-point exception shall be
raised.
.sp
.LP
These functions may fail if:
.TP
Range\0Error
The result underflows. 
.LP
If the integer expression (math_errhandling & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set to [ERANGE]. If the
integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
then the underflow floating-point exception shall be
raised.
.sp
.LP
\fIThe following sections are informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling
& MATH_ERREXCEPT) are independent of
each other, but at least one of them must be non-zero.
.SH RATIONALE
.LP
These functions are named so as to avoid conflicting with the historical
definition of the \fIscalb\fP() function from the Single UNIX Specification.
The difference is that the \fIscalb\fP() function has a second argument
of \fBdouble\fP instead of \fBint\fP. The \fIscalb\fP() function is
not part of the ISO\0C standard. The three functions whose second
type
is \fBlong\fP are provided because the factor required to scale from
the smallest positive floating-point value to the largest
finite one, on many implementations, is too large to represent in
the minimum-width \fBint\fP format.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfeclearexcept\fP() , \fIfetestexcept\fP() , \fIscalb\fP() , the
Base Definitions volume of IEEE\0Std\01003.1-2001, Section 4.18, Treatment
of Error Conditions for Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
